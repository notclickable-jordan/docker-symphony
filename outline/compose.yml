services:
  backup:
    image: alpine:3.17.2
    container_name: outline_backup
    entrypoint: "tail -f /dev/null"
    restart: unless-stopped
    volumes:
      - db:/var/lib/postgresql/data:ro
      - data:/data:ro

  outline:
    image: docker.getoutline.com/outlinewiki/outline:latest
    container_name: outline
    env_file: ./env.outline
    ports:
      - 8210:3000
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - storage

  redis:
    image: redis
    container_name: outline_redis
    ports:
      - 8212:6379
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 3

  postgres:
    image: postgres
    container_name: outline_postgres
    ports:
      - 8213:5432
    restart: unless-stopped
    volumes:
      - db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 30s
      timeout: 20s
      retries: 3
    env_file: env.postgres

  storage:
    image: minio/minio
    container_name: outline_minio
    env_file: ./env.minio
    ports:
      - 8211:9000
    entrypoint: sh
    command: -c 'minio server'
    restart: unless-stopped
    volumes:
      - data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Create the initial bucket
  # create_bucket:
  #   image: minio/mc
  #   container_name: outline_create_bucket
  #   depends_on:
  #     - storage
  #   entrypoint: >
  #     /bin/sh -c "
  #     /usr/bin/mc config host rm local;
  #     /usr/bin/mc config host add local http://storage:9000 ACCESS_KEY SECRET_KEY;
  #     /usr/bin/mc rm -r --force local/outline;
  #     /usr/bin/mc mb -p local/outline;
  #     /usr/bin/mc anonymous set download local/outline;
  #     "
  #   environment:
  #     - MC_HOST=storage

volumes:
  data:
  db: