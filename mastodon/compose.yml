services:
  backup:
    image: alpine:3.17.2
    container_name: mastodon_backup
    entrypoint: "tail -f /dev/null"
    restart: always
    volumes:
      - web:/mastodon/public/system:ro
      - redis:/data:ro
      - db:/var/lib/postgresql/data:ro
      - letsencrypt:/etc/letsencrypt:ro
      - letsencrypt_lib:/var/lib/letsencrypt:ro

  nginx:
    image: nginx:1.23.3
    container_name: mastodon_nginx
    restart: always
    ports:
      - 8010:80
      - 8011:443
    depends_on:
      - web
      - sidekiq
      - streaming
    volumes:
      - ./default.conf:/etc/nginx/conf.d/default.conf
      - letsencrypt:/etc/letsencrypt
      - certbot:/var/www/certbot

  letsencrypt:
    image: certbot/certbot:v2.4.0
    container_name: mastodon_letsencrypt
    command: sh -c "certbot certonly --reinstall -v -d notclickable.social -d www.notclickable.social --webroot --webroot-path /var/www/certbot/ --agree-tos --email jordan@notclickable.com"
    entrypoint: ""
    depends_on:
      - nginx
      - web
    volumes:
      - letsencrypt:/etc/letsencrypt
      - certbot:/var/www/certbot
      - letsencrypt_lib:/var/lib/letsencrypt
    environment:
      - TERM=xterm

  db:
    image: postgres:14-alpine
    container_name: mastodon_db
    restart: always
    env_file: env.postgres
    shm_size: 256mb
    networks:
      - internal_network
    healthcheck:
      test: [ 'CMD', 'pg_isready', '-U', 'mastodon' ]
    volumes:
      - db:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    container_name: mastodon_redis
    restart: always
    networks:
      - internal_network
    healthcheck:
      test: [ 'CMD', 'redis-cli', 'ping' ]
    volumes:
      - redis:/data

  web:
    image: tootsuite/mastodon:v4.1.0
    container_name: mastodon_web
    restart: always
    env_file: env.production
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000"
    networks:
      - external_network
      - internal_network
    healthcheck:
      # prettier-ignore
      test:
        [
          'CMD-SHELL',
          'wget -q --spider --proxy=off localhost:3000/health || exit 1'
        ]
    ports:
      - 8012:3000
    depends_on:
      - db
      - redis
    volumes:
      - web:/mastodon/public/system
      - certbot:/var/www/certbot:ro

  streaming:
    image: tootsuite/mastodon:v4.1.0
    container_name: mastodon_streaming
    restart: always
    env_file: env.production
    command: node ./streaming
    networks:
      - external_network
      - internal_network
    healthcheck:
      # prettier-ignore
      test:
        [
          'CMD-SHELL',
          'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1'
        ]
    ports:
      - 8013:4000
    depends_on:
      - db
      - redis

  sidekiq:
    image: tootsuite/mastodon:v4.1.0
    container_name: mastodon_sidekiq
    restart: always
    env_file: env.production
    command: bundle exec sidekiq
    depends_on:
      - db
      - redis
    networks:
      - external_network
      - internal_network
    healthcheck:
      test: [ 'CMD-SHELL', "ps aux | grep '[s]idekiq 6' || false" ]
    volumes:
      - web:/mastodon/public/system

networks:
  external_network:
  internal_network:
    internal: true

volumes:
  sidekiq:
  db:
  redis:
  web:
  letsencrypt:
  letsencrypt_lib:
  certbot:
